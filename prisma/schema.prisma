generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  name         String
  profileImage String?
  email        String     @unique
  password     String
  role         UserRole   @default(USER)
  status       UserStatus @default(ACTIVE)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  reviews    Review[]
  comments   Comment[]
  likes      Like[]
  watchlists Watchlist[]
  purchase   Purchase[]

  @@map("users")
}

model Movie {
  id            String    @id @default(uuid())
  title         String
  synopsis      String
  genres        String[]
  type          MediaType @default(MOVIE)
  releaseYear   Int
  isDeleted     Boolean   @default(false)
  director      String
  cast          String[]
  platforms     String[]
  buyPrice      Float
  rentPrice     Float
  discountPrice Float?
  thumbnail     String
  streamingLink String
  reviews       Review[]
  isTrending    Boolean   @default(false)

  totalRating Int @default(0)
  avgRating   Float @default(0.0)
  reviewCount Int   @default(0)
  likesCount  Int   @default(0)

  watchlists Watchlist[]
  purchase   Purchase[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("movies")
}

model Review {
  id         String   @id @default(uuid())
  rating     Int
  content    String
  tags       String[]
  hasSpoiler Boolean  @default(false)
  approved   Boolean  @default(false)

  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String

  movie   Movie  @relation(fields: [movieId], references: [id])
  movieId String

  likes    Like[]
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Comment {
  id       String  @id @default(uuid())
  approved Boolean @default(false)
  content  String
  user     User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId   String

  review   Review @relation(fields: [reviewId], references: [id])
  reviewId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Like {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId   String
  review   Review @relation(fields: [reviewId], references: [id])
  reviewId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, reviewId])
  @@map("likes")
}

model Watchlist {
  id      String @id @default(uuid())
  userId  String
  movieId String

  users  User  @relation(fields: [userId], references: [id])
  movies Movie @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId])
  @@map("watchlists")
}

model Purchase {
  id               String        @id @default(uuid())
  purchase_type    PurchaseType
  userId           String
  movieId          String
  amount           Float
  currency         String
  paymentStatus    PaymentStatus
  transactionId    String
  purchasedAt      DateTime      @default(now())
  accessExpiryTime DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  users User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId])
  @@map("purchase")
}

enum PurchaseType {
  BUY
  RENT
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum MediaType {
  MOVIE
  SERIES
  // DOCUMENTARY
  // ANIME
  // SHOW
  // SHORT_FILM
}
